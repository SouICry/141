110010010 // clear r2
110010011 // clear r3
110010100 // clear r4
101010001 // loadfromaddress #1
011000101 // copy r0 r5
101010010 // loadfromaddress #2
011000110 // copy r0 r6
111010111 // storepcplustwo r7
010001101 // bn multiply
011010100 // copy r2 r4
011011101 // copy r3 r5
110010010 // clear r2
110010011 // clear r3
101010011 // loadfromaddress #3
011000110 // copy r0 r6
111010111 // storepcplustwo r7
010000101 // bn multiply
011010000 // copy r2, r0
101001100 // store #4
011011000 // copy r3, r0
101001101 // store #5
101100011 // multiply: loadimmonelsl #3
011000001 // copy r0 r1
110110011 // loop: leftshift1 r3 
110110010 // leftshift1 r2 //shifts in 1 if lower shifted out 1
110101110 // setisnegative r6 // if second number highest bit is 1
010000110 // bn skip
011101000 // copy r5 r0 // first number lower
110011011 // addto r3 // add first number lower 8 bits to lower 8 bits. overflow bit is set if overflow
110100010 // incrementifset r2 // if overflow, add 1 to upper
011100000 // copy r4 r0
110011010 // addto r2 // add first number upper to upper
110110110 // skip: leftshift1 r6
111001001 // decrement r1
010110101 // bn loop
111011111 // end: return r7
